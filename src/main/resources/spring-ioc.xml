<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--包扫描-->
    <context:component-scan base-package="asia.lhweb.diagnosis"/>

    <!--开启Mvc注解驱动-->
    <mvc:annotation-driven/>

    <!--    Mvc默认解析-->
    <mvc:default-servlet-handler/>

    <!--配置fastjson 设置返回类型为json-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <ref bean="fastJson"/>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--fastjson的bean-->
    <bean id="fastJson" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <mvc:interceptors>
        <!--         使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <mvc:interceptor>
            <!-- 进行拦截：/**表示拦截所有controller -->
            <mvc:mapping path="/**" />
            <!-- 不进行拦截 -->
            <mvc:exclude-mapping path="/admin/admin/login" />
            <mvc:exclude-mapping path="/common/getCode" />
            <mvc:exclude-mapping path="/text/**" />
            <bean class="asia.lhweb.diagnosis.interceptor.LoginInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>

    <!--配置redis配置文件-->
    <context:property-placeholder location="classpath:redis.properties"/>

    <!-- Redis连接工厂配置 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.database}"/>
        <property name="password" value="${redis.password}"/>
    </bean>

    <!-- Redis操作模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 设置key和value的序列化方式 -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <!--    静态资源映射-->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>
</beans>